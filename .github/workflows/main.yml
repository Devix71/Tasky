name: Test, Build, and Deploy to Azure

on:
  push:
    branches:
      - main

jobs:
  # ===============================================
  #  JOB 1: Run Tests
  # ===============================================
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: pip install "poetry>=1.2.0"

      - name: Install project dependencies
        run: poetry install --no-root

      - name: Run pytest
        run: poetry run pytest

  # ===============================================
  #  JOB 2: Build and Deploy
  # ===============================================
  deploy:
    needs: test
    
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Delete existing Resource Group to prevent conflicts
        run: az group delete --name ${{ secrets.RESOURCE_GROUP_NAME }} --yes --no-wait

      - name: Wait for Resource Group deletion to complete
        run: az group wait --name ${{ secrets.RESOURCE_GROUP_NAME }} --deleted
      
      # --- STEP 1: DEPLOY INFRASTRUCTURE (FIRST PASS) ---
      - name: Deploy Bicep Infrastructure
        id: deploy_infra
        uses: azure/arm-deploy@v2
        with:
          subscriptionId: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
          resourceGroupName: ${{ secrets.RESOURCE_GROUP_NAME }}
          region: ${{ secrets.AZURE_REGION }}
          template: ./infra/main.bicep
          parameters: 'sqlAdminPassword=${{ secrets.AZURE_SQL_PASSWORD }} jwtSecretKey=${{ secrets.JWT_SECRET_KEY }} appGatewayCertificateData=${{ secrets.APP_GATEWAY_CERT_DATA }} appGatewayCertificatePassword=${{ secrets.APP_GATEWAY_CERT_PASSWORD }}'
          deploymentMode: Incremental

      # --- STEP 2: LOG IN TO THE NEWLY CREATED ACR ---
      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ fromJson(steps.deploy_infra.outputs.outputs).acrLoginServer.value }}
          username: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          password: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
      
      # --- STEP 3: BUILD AND PUSH THE REAL IMAGE ---
      - name: Build and push Docker image
        run: |
          docker build . -t ${{ fromJson(steps.deploy_infra.outputs.outputs).acrLoginServer.value }}/task-reminder-api:${{ github.sha }}
          docker push ${{ fromJson(steps.deploy_infra.outputs.outputs).acrLoginServer.value }}/task-reminder-api:${{ github.sha }}

      # --- STEP 4: UPDATE THE INFRASTRUCTURE (SECOND PASS) ---
      - name: Update Container Instance with New Image Tag
        uses: azure/arm-deploy@v2
        with:
          subscriptionId: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
          resourceGroupName: ${{ secrets.RESOURCE_GROUP_NAME }}
          region: ${{ secrets.AZURE_REGION }}
          template: ./infra/main.bicep
          parameters: 'sqlAdminPassword=${{ secrets.AZURE_SQL_PASSWORD }} jwtSecretKey=${{ secrets.JWT_SECRET_KEY }} containerImageTag=${{ github.sha }} appGatewayCertificateData=${{ secrets.APP_GATEWAY_CERT_DATA }} appGatewayCertificatePassword=${{ secrets.APP_GATEWAY_CERT_PASSWORD }}'
          deploymentMode: Incremental
      
      - name: Logout from Azure
        if: always()
        run: az logout